/*
 * Copyright [2019] [Undersea contributors]
 *
 * Developed from: https://github.com/gerasimou/UNDERSEA
 * To: https://github.com/SirCipher/UNDERSEA
 *
 * Contact: Thomas Klapwijk - tklapwijk@pm.me
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.type2labs.undersea.common.consensus;

import com.type2labs.undersea.common.cluster.Client;
import com.type2labs.undersea.common.cluster.PeerId;

import java.util.Map;

/**
 * A multi-role state is one whereby there are a number of clients that are associated with this
 * {@link com.type2labs.undersea.common.agent.Agent}, however, they are not directly in the same cluster. They know
 * of one another and can alert one another of certain events and transfer
 * {@link com.type2labs.undersea.common.agent.Agent}s to each others cluster.
 */
public interface MultiRoleState {

    /**
     * Sets the leader of this MRS
     *
     * @param client to lead
     */
    void setLeader(Client client);

    /**
     * Sets the MRS status
     *
     * @param status to change to
     */
    void setStatus(MultiRoleStatus status);

    /**
     * The current MRS
     *
     * @return the status
     */
    MultiRoleStatus status();

    /**
     * If the {@link MultiRoleStatus#LEADER}
     *
     * @return if this {@link com.type2labs.undersea.common.agent.Agent} is this MRS leader
     */
    boolean isLeader();

    /**
     * Handles the failure of a {@link Client} that is in {@link MultiRoleState#remotePeers()}
     *
     * @param client that has failed
     */
    void handleFailure(Client client);

    /**
     * Sets the generated mission that a {@link Client} {@link com.type2labs.undersea.common.agent.Agent} is
     * executing. This is in case that agent fails and it requires backup.
     *
     * @param client               that has started a new mission
     * @param generatedMissionJson that was generated by the {@link Client}
     */
    void setGeneratedMission(Client client, String generatedMissionJson);

    /**
     * The returned {@link Map} contains a mapping of remote {@link PeerId} to {@link Client} that are in our MRS
     * cluster
     *
     * @return the peers in this MRS cluster
     */
    Map<PeerId, Client> remotePeers();

}
