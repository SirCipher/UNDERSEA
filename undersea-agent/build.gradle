/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/java_library_plugin.html
 */

import org.apache.tools.ant.taskdefs.condition.Os


plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

wrapper {
    gradleVersion = '5.5.1'
    distributionUrl = distributionUrl.replace("bin", "all")
}

repositories {
    jcenter()
}

ext {
    isBuildServer = findProperty('buildserver') ?: 'false'
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jacocoTestReport {
        reports {
            xml.enabled = true
            csv.enabled = false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    repositories {
        jcenter()
    }

    test {
        reports {
            junitXml.enabled = true
            html.enabled = false
        }

        beforeTest { descriptor ->
            logger.lifecycle("Running test: ${descriptor}")
        }

        testLogging {
            exceptionFormat = 'full'
            testLogging.showStandardStreams = true

        }
    }

    dependencies {
        // Use JUnit Jupiter API for testing.
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.4.2'

        // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.2'

        // https://mvnrepository.com/artifact/junit/junit
        testCompile group: 'junit', name: 'junit', version: '4.12'

        // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'

        // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
        compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.0'

        // https://mvnrepository.com/artifact/commons-io/commons-io
        compile group: 'commons-io', name: 'commons-io', version: '2.6'

        // This dependency is used internally, and not exposed to consumers on their own compile classpath.
        implementation 'com.google.guava:guava:27.1-jre'

        // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.0.pr1'
    }

    tasks.withType(Test) {
        String path = "${rootProject.projectDir}/../libraries/repo/ortools/:";

        if (Os.isFamily(Os.FAMILY_MAC)) {
            path += "${rootProject.projectDir}/../libraries/repo/prism/osx";
            environment "DYLD_LIBRARY_PATH", "${rootProject.projectDir}/../libraries/MATLAB/v95/sys/os/maci64/:${rootProject.projectDir}/../libraries/MATLAB/v95/bin/maci64/:${rootProject.projectDir}/../libraries/MATLAB/v95/extern/bin/maci64/:${rootProject.projectDir}/../libraries/repo/prism/osx/"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            path += "${rootProject.projectDir}/../libraries/repo/prism/linux";
            environment "LD_LIBRARY_PATH", "${rootProject.projectDir}/../libraries/MATLAB/v95/sys/os/glnxa64/:${rootProject.projectDir}/../libraries/MATLAB/v95/bin/glnxa64/:${rootProject.projectDir}/../libraries/MATLAB/v95/runtime/glnxa64/:${rootProject.projectDir}/../libraries/repo/prism/linux/"
        } else {
            throw new GradleException("Unsupported operating system")
        }

        systemProperty "java.library.path", path
        systemProperty "buildserver", isBuildServer
    }

}

dependencies {

}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects*.test
}

task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}